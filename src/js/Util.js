// Generated by CoffeeScript 1.8.0
(function() {
  define([], function() {
    'use strict';
    var Util;
    Util = {};
    Util.maptree = function(tree, fun, predicate) {
      var key, newObj;
      if (predicate(tree)) {
        return fun(tree);
      }
      if (tree instanceof Array) {
        return tree.map(function(elem) {
          return Util.maptree(elem, fun, predicate);
        });
      } else if (typeof tree === 'object') {
        newObj = {};
        for (key in tree) {
          newObj[key] = Util.maptree(tree[key], fun, predicate);
        }
        return newObj;
      }
    };
    Util.findFirst = function(array, predicate) {
      var i;
      i = 0;
      while (i < array.length) {
        if (predicate(array[i], i)) {
          return {
            element: array[i],
            index: i
          };
        }
        i++;
      }
    };
    Util.removeFirst = function(array, predicate) {
      var firstMatch;
      firstMatch = Util.findFirst(array, predicate);
      if (firstMatch) {
        array.splice(firstMatch.index, 1);
      }
    };
    Util.remove = function(array, element) {
      Util.removeFirst(array, function(entry) {
        return entry === element;
      });
    };
    Util.objectToArray = function(object, nameProperty, dataProperty) {
      var array, entry, key;
      array = [];
      for (key in object) {
        entry = {};
        entry[nameProperty] = key;
        entry[dataProperty] = object[key];
        array.push(entry);
      }
      return array;
    };
    Util.arrayToObject = function(array, nameProperty, dataProperty) {
      var object;
      object = {};
      array.forEach(function(element) {
        object[element[nameProperty]] = element[dataProperty];
      });
      return object;
    };
    Util.indexBy = function(array, nameProperty) {
      var map;
      map = {};
      if (typeof nameProperty === 'string') {
        array.forEach(function(element) {
          map[element[nameProperty]] = element;
        });
      } else {
        array.forEach(function(element) {
          map[nameProperty(element)] = element;
        });
      }
      return map;
    };
    Util.pluck = function(array, propertyName) {
      return array.map(function(element) {
        return element[propertyName];
      });
    };
    Util.getSet = function(array, nameProperty) {
      var set;
      set = {};
      if (nameProperty != null) {
        array.forEach(function(element) {
          set[element[nameProperty]] = true;
        });
      } else {
        array.forEach(function(element) {
          set[element] = true;
        });
      }
      return set;
    };
    Util.mapOnKeys = function(object, fun) {
      var key, ret;
      ret = {};
      for (key in object) {
        ret[key] = fun(object[key]);
      }
      return ret;
    };
    Util.groupBy = function(array, fun) {
      var groups;
      groups = {};
      array.forEach(function(element) {
        var ret;
        ret = fun(element);
        if (!groups[ret]) {
          groups[ret] = [];
        }
        groups[ret].push(element);
      });
      return groups;
    };
    Util.getDuplicate = function(array) {
      var duplicate, elementsByName, index;
      elementsByName = {};
      duplicate = null;
      index = -1;
      array.every(function(element, i) {
        if (elementsByName[element] != null) {
          duplicate = element;
          index = i;
          return false;
        } else {
          elementsByName[element] = true;
          return true;
        }
      });
      return {
        value: duplicate,
        index: index
      };
    };
    Util.capitalize = function(string) {
      return string.substring(0, 1).toUpperCase() + string.substring(1);
    };
    Util.isCapitalized = function(string) {
      var _ref;
      return ('A' <= (_ref = string[0]) && _ref <= 'Z');
    };
    return Util;
  });

}).call(this);
