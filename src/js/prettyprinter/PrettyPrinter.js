// Generated by CoffeeScript 1.8.0
(function() {
  define([], function() {
    'use strict';
    var PrettyPrinter, print, printColors, printEnterRules, printLeaveRules, printLegend, printLevels, printNearRules, printObjects, printParams, printPlayer, printSets, printSounds, printUseRules;
    PrettyPrinter = {};
    print = function(spec) {
      var sections, _ref, _ref1, _ref2, _ref3;
      sections = [];
      sections.push(printParams(spec.params));
      sections.push(printColors(spec.colors));
      sections.push(printPlayer(spec.player));
      sections.push(printObjects(spec.objects));
      sections.push(printSets(spec.sets));
      if ((_ref = spec.sounds) != null ? _ref.length : void 0) {
        sections.push(printSounds(spec.sounds));
      }
      if ((_ref1 = spec.nearRules) != null ? _ref1.length : void 0) {
        sections.push(printNearRules(spec.nearRules));
      }
      if ((_ref2 = spec.leaveRules) != null ? _ref2.length : void 0) {
        sections.push(printLeaveRules(spec.leaveRules));
      }
      if ((_ref3 = spec.enterRules) != null ? _ref3.length : void 0) {
        sections.push(printEnterRules(spec.enterRules));
      }
      sections.push(printUseRules(spec.useRules));
      sections.push(printLegend(spec.legend));
      sections.push(printLevels(spec.levels));
      return sections.join('\n\n');
    };
    PrettyPrinter.print = print;
    printParams = function(spec) {
      return 'PARAM\n\n' + spec.map(function(_arg) {
        var name, parts;
        name = _arg.name, parts = _arg.parts;
        return name + ' ' + parts.join(' ');
      }).join('\n');
    };
    PrettyPrinter.printParams = printParams;
    printColors = function(spec) {
      return 'COLORS\n\n' + spec.map(function(_arg) {
        var blue, green, name, red;
        name = _arg.name, red = _arg.red, green = _arg.green, blue = _arg.blue;
        return "" + name + " rgb " + red + " " + green + " " + blue;
      }).join('\n');
    };
    PrettyPrinter.printColors = printColors;
    printPlayer = function(spec) {
      return 'PLAYER\n\n' + spec.map(function(_arg) {
        var data, name;
        name = _arg.name, data = _arg.data;
        return name + '\n' + data.join('\n');
      }).join('\n\n');
    };
    PrettyPrinter.printPlayer = printPlayer;
    printObjects = function(spec) {
      return 'OBJECTS\n\n' + spec.map(function(_arg) {
        var blocking, data, name;
        name = _arg.name, blocking = _arg.blocking, data = _arg.data;
        return name + (blocking ? ' blocking' : '') + '\n' + data.join('\n');
      }).join('\n\n');
    };
    PrettyPrinter.printObjects = printObjects;
    printSets = function(spec) {
      return 'SETS\n\n' + spec.map(function(_arg) {
        var elements, name, operand1, operand2, operator;
        name = _arg.name, elements = _arg.elements, operator = _arg.operator, operand1 = _arg.operand1, operand2 = _arg.operand2;
        return name + ' = ' + (elements != null ? elements.join(' ') : "" + operand1 + " " + operator + " " + operand2);
      }).join('\n');
    };
    PrettyPrinter.printSets = printSets;
    printSounds = function(spec) {
      return 'SOUNDS\n\n' + spec.map(function(_arg) {
        var id, soundString;
        id = _arg.id, soundString = _arg.soundString;
        return "" + soundString + " " + id;
      }).join('\n');
    };
    PrettyPrinter.printSounds = printSounds;
    printNearRules = function(spec) {
      return 'NEARRULES\n\n' + spec.map(function(_arg) {
        var heal, hurt, inTerrainItemName, outTerrainItemName, str;
        inTerrainItemName = _arg.inTerrainItemName, outTerrainItemName = _arg.outTerrainItemName, heal = _arg.heal, hurt = _arg.hurt;
        str = "" + inTerrainItemName + " -> " + outTerrainItemName;
        if (heal != null) {
          str += " ; heal " + heal;
        }
        if (hurt != null) {
          str += " ; hurt " + hurt;
        }
        return str;
      }).join('\n');
    };
    PrettyPrinter.printNearRules = printNearRules;
    printLeaveRules = function(spec) {
      return 'LEAVERULES\n\n' + spec.map(function(_arg) {
        var inTerrainItemName, outTerrainItemName;
        inTerrainItemName = _arg.inTerrainItemName, outTerrainItemName = _arg.outTerrainItemName;
        return "" + inTerrainItemName + " -> " + outTerrainItemName;
      }).join('\n');
    };
    PrettyPrinter.printLeaveRules = printLeaveRules;
    printEnterRules = function(spec) {
      return 'ENTERRULES\n\n' + spec.map(function(_arg) {
        var checkpoint, give, giveStr, heal, hurt, inTerrainItemName, message, outTerrainItemName, str, teleport;
        inTerrainItemName = _arg.inTerrainItemName, outTerrainItemName = _arg.outTerrainItemName, give = _arg.give, heal = _arg.heal, hurt = _arg.hurt, message = _arg.message, teleport = _arg.teleport, checkpoint = _arg.checkpoint;
        str = "" + inTerrainItemName + " -> " + outTerrainItemName;
        if (give != null) {
          giveStr = give.map(function(_arg1) {
            var itemName, quantity;
            quantity = _arg1.quantity, itemName = _arg1.itemName;
            return "" + quantity + " " + itemName;
          }).join(' , ');
          str += " ; give " + giveStr;
        }
        if (heal != null) {
          str += " ; heal " + heal;
        }
        if (hurt != null) {
          str += " ; hurt " + hurt;
        }
        if (teleport != null) {
          str += " ; teleport " + teleport.levelName + " " + teleport.x + " " + teleport.y;
        }
        if (message != null) {
          str += " ; message '" + message + "'";
        }
        if (checkpoint) {
          str += " ; checkpoint";
        }
        return str;
      }).join('\n');
    };
    PrettyPrinter.printEnterRules = printEnterRules;
    printUseRules = function(spec) {
      return 'USERULES\n\n' + spec.map(function(_arg) {
        var consume, give, giveStr, heal, hurt, inInventoryItemName, inTerrainItemName, message, outTerrainItemName, sound, str, teleport;
        inTerrainItemName = _arg.inTerrainItemName, inInventoryItemName = _arg.inInventoryItemName, outTerrainItemName = _arg.outTerrainItemName, give = _arg.give, heal = _arg.heal, hurt = _arg.hurt, message = _arg.message, teleport = _arg.teleport, sound = _arg.sound, consume = _arg.consume;
        str = "" + inTerrainItemName + " " + inInventoryItemName + " -> " + outTerrainItemName;
        if (give != null) {
          giveStr = give.map(function(_arg1) {
            var itemName, quantity;
            quantity = _arg1.quantity, itemName = _arg1.itemName;
            return "" + quantity + " " + itemName;
          }).join(' , ');
          str += " ; give " + giveStr;
        }
        if (heal != null) {
          str += " ; heal " + heal;
        }
        if (hurt != null) {
          str += " ; hurt " + hurt;
        }
        if (teleport != null) {
          str += " ; teleport " + teleport.levelName + " " + teleport.x + " " + teleport.y;
        }
        if (message != null) {
          str += " ; message '" + message + "'";
        }
        if (sound != null) {
          str += " ; sound " + sound;
        }
        if (consume) {
          str += " ; consume";
        }
        return str;
      }).join('\n');
    };
    PrettyPrinter.printUseRules = printUseRules;
    printLegend = function(spec) {
      return 'LEGEND\n\n' + spec.map(function(_arg) {
        var name, objectName;
        name = _arg.name, objectName = _arg.objectName;
        return "" + name + " " + objectName;
      }).join('\n');
    };
    PrettyPrinter.printLegend = printLegend;
    printLevels = function(spec) {
      return 'LEVELS\n\n' + spec.map(function(_arg) {
        var data, name;
        name = _arg.name, data = _arg.data;
        return name + '\n' + data.join('\n');
      }).join('\n\n');
    };
    PrettyPrinter.printLevels = printLevels;
    return PrettyPrinter;
  });

}).call(this);
