// Generated by CoffeeScript 1.12.3
(function() {
  define(['tokenizer/Tokenizer', 'parser/Parser', 'extractor/ValueExtractor', 'prettyprinter/PrettyPrinter', 'editor/furnace-mode'], function(Tokenizer, Parser, ValueExtractor, PrettyPrinter) {
    'use strict';
    var errorLine, getEditor, inWorldEditor, outInterpretedEditor, outTokensEditor, parse, run, setupEditors;
    inWorldEditor = null;
    outTokensEditor = null;
    outInterpretedEditor = null;
    errorLine = null;
    getEditor = function(elementId) {
      var editor;
      editor = ace.edit(elementId);
      editor.setTheme('ace/theme/monokai');
      return editor;
    };
    setupEditors = function() {
      inWorldEditor = getEditor('in-world');
      inWorldEditor.getSession().setMode('ace/mode/furnace');
      inWorldEditor.on('input', parse);
      inWorldEditor.$blockScrolling = 2e308;
      outTokensEditor = getEditor('out-tokens');
      outTokensEditor.setReadOnly(true);
      outTokensEditor.$blockScrolling = 2e308;
      outInterpretedEditor = getEditor('out-world');
      outInterpretedEditor.setReadOnly(true);
      outInterpretedEditor.$blockScrolling = 2e308;
    };
    parse = function() {
      var ex, inText, line, outTokensText, outTreeText, tokens, tree, valueTree;
      inText = inWorldEditor.getValue();
      try {
        tokens = Tokenizer.chop(inText);
        outTokensText = tokens.join('\n');
        outTokensEditor.setValue(outTokensText, -1);
        tree = Parser.parse(tokens);
        valueTree = ValueExtractor.extract(tree);
        outTreeText = PrettyPrinter.print(valueTree);
        outInterpretedEditor.setValue(outTreeText, -1);
        if (errorLine !== null) {
          inWorldEditor.getSession().setAnnotations([]);
          errorLine = null;
        }
        document.getElementById('status').classList.add('ok');
        document.getElementById('status').classList.remove('err');
        document.getElementById('status').innerHTML = 'OK';
      } catch (error) {
        ex = error;
        if (ex.line || ex.token) {
          line = ex.line || ex.token.coords.line;
          if (line !== errorLine && errorLine !== null) {
            inWorldEditor.getSession().setAnnotations([]);
          }
          errorLine = line;
          inWorldEditor.getSession().setAnnotations([
            {
              row: errorLine - 1,
              text: ex.message || ex,
              type: 'error'
            }
          ]);
        }
        document.getElementById('status').classList.add('err');
        document.getElementById('status').classList.remove('ok');
        document.getElementById('status').innerHTML = ex.message || ex;
      }
    };
    run = function() {
      setupEditors();
      inWorldEditor.setValue(window.sampleSpecs['little-furnace'], -1);
      parse();
    };
    return {
      run: run
    };
  });

}).call(this);
